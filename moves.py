#!/usr/bin/env python3

# Converts moves.asm between assembly and excel for easier move editing.

from pathlib import Path
from argparse import ArgumentParser
from openpyxl import Workbook, load_workbook # TODO switch to csv so script can run on standard library

parser = ArgumentParser()
parser.description = 'Converts moves.asm between assembly and excel for easier move editing. When conveting from excel, table order is preserved.'
parser.add_argument('-i', '--infile', type=Path, help='Path of the .asm or .xlsx file to parse. Filetype determines parse action.')
parser.add_argument('-o', '--outdir', type=Path, help='Directory to save the parsed file in. Defaults to current directory.', default='.')
parser.add_argument('-s', '--sheet', type=str, help='Name of the worksheet to parse, if not the first one. Ignored if input is an .asm file.')
parser.add_argument('--no-header', action='store_true', help='If set, does not skip over the first row of the spreadsheet. Ignored if input is an .asm file.')
ARGS, _ = parser.parse_known_args()

def asm_to_xlsx(outfile:Path) -> None:
    wb = Workbook()
    wb.active.append(['Name', 'Effect', 'Power', 'Type', 'Accuracy', 'PP'])
    with ARGS.infile.open() as file:
        in_table = False
        for line in file.readlines():
            data = line.split(';')[0].split('\tmove')
            if len(data) > 1: wb.active.append([text.strip() for text in data[-1].split(',')])
    wb.save(outfile)

def rpad(string:str, target:int):
    # right pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return string + ' '*amount if amount > 0 else string

def lpad(string:str, target:int):
    # left pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return ' '*amount + string if amount > 0 else string
                
def xlsx_to_asm(outfile:Path) -> None:
    wb = load_workbook(ARGS.infile)
    ws = wb[ARGS.sheet] if ARGS.sheet else wb.active
    with open(outfile, 'w') as file:
        lines = [
            'MACRO move',
            '\tdb \\1 ; animation (interchangeable with move id)',
            '\tdb \\2 ; effect',
            '\tdb \\3 ; power',
            '\tdb \\4 ; type',
            '\tdb \\5 percent ; accuracy',
            '\tdb \\6 ; pp',
            '\tassert \\6 <= 40, "PP must be 40 or less"',
            'ENDM',
            '',
            'Moves:',
            '; Characteristics of each move.',
            '\ttable_width MOVE_LENGTH, Moves',
        ]
        for name, effect, power, _type, accuracy, pp, *_ in ws.iter_rows(min_row=1+int(not ARGS.no_header), values_only=True):
            if any([not field.isnumeric() for field in [power, accuracy, pp]]): raise ValueError('Power, Accuracy, and PP must be numeric.')
            name, effect, _type = [field.upper().strip() for field in [name, effect, _type]]
            _type = 'PSYCHIC_TYPE' if _type == 'PSYCHIC' else _type
            power, accuracy, pp = [lpad(field, 3) for field in [power, accuracy, pp]]
            name, effect, power, _type, accuracy = [field+',' for field in [name, effect, power, _type, accuracy]]
            lines.append(f'\tmove {rpad(name, 13)} {rpad(effect, 27)} {rpad(power, 4)} {rpad(_type, 13)} {rpad(accuracy, 4)}{pp}')
        lines.append('\tassert_table_length NUM_ATTACKS')
        lines.append('\n; autogenerated by moves.py')
        file.writelines([line+'\n' for line in lines])

if __name__ == '__main__':
    error = None
    if not ARGS.infile: error = 'No input file specified. Please specify using -i.'
    if not ARGS.infile.suffix in ['.asm', '.xlsx']: error = 'Input must be .asm or .xlsx file.'
    if not ARGS.infile.exists(): error = 'Input file does not exist.'
    if ARGS.outdir.suffix: error = 'Output must be a directory, not a file.'
    try: ARGS.outdir.mkdir(parents=True, exist_ok=True)
    except Exception as e: error = 'Error while creating output dir: ' + e
    if error:    
        print(error+' (Use -h to see options)')
        exit()
    outfile = ARGS.outdir.joinpath(ARGS.infile.stem).with_suffix({'.asm':'.xlsx','.xlsx':'.asm'}[ARGS.infile.suffix])
    print(f'Converting {ARGS.infile} to {outfile}...', end='\r')
    {'.asm': asm_to_xlsx, '.xlsx': xlsx_to_asm }[ARGS.infile.suffix](outfile)
    print(f'Converting {ARGS.infile} to {outfile}...Done.')
