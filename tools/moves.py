#!/usr/bin/env python3

# Converts moves.asm between assembly and csv for easier move editing.

import csv
from pathlib import Path
from argparse import ArgumentParser

parser = ArgumentParser()
parser.description = 'Converts moves.asm between assembly and excel for easier move editing. For all conversions, table order is preserved.'
parser.add_argument('-i', '--infile', type=Path, help='Path of the .asm or .csv file to parse. Filetype determines parse action.')
parser.add_argument('-o', '--outdir', type=Path, help='Directory to save the parsed file in. Defaults to current directory.', default='.')
parser.add_argument('-s', '--sheet', type=str, help='Name of the worksheet to parse, if not the first one. Ignored if input is an .asm file.')
parser.add_argument('--no-header', action='store_true', help='If set, the first row of the spreadsheet is treated as part of the data.')
ARGS, _ = parser.parse_known_args()

def asm_to_csv(outfile:Path) -> None:
    # converts the move list in `outfile` to a .csv table matching the Moves table in `ARGS.infile` (-i).
    with ARGS.infile.open() as infile:
        with open(outfile, 'w', newline='') as outfile:
            writer = csv.writer(outfile, delimiter=',')
            if (not ARGS.no_header): writer.writerow(['Name', 'Effect', 'Power', 'Type', 'Accuracy', 'PP'])
            for line in infile.readlines():
                data = line.split(';')[0].split('\tmove')
                if len(data) > 1: writer.writerow([text.strip() for text in data[-1].split(',')])

def rpad(string:str, target:int):
    # right pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return string + ' '*amount if amount > 0 else string

def lpad(string:str, target:int):
    # left pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return ' '*amount + string if amount > 0 else string
                
def csv_to_asm(outfile:Path) -> None:
    # converts the csv table at `ARGS.infile` (-i) into a "valid" copy of moves.asm and writes it to `outfile`.
    # NOTE: "valid" assumes that all fields are written exactly as they appear in the code;
    #        only making strings uppercase, num checking, and converting 'Psychic' to 'PSYCHIC_TYPE' are automated
    with ARGS.infile.open() as infile:
        with open(outfile, 'w') as outfile:
            reader = csv.reader(infile, delimiter=',')
            lines = [
                'MACRO move',
                '\tdb \\1 ; animation (interchangeable with move id)',
                '\tdb \\2 ; effect',
                '\tdb \\3 ; power',
                '\tdb \\4 ; type',
                '\tdb \\5 percent ; accuracy',
                '\tdb \\6 ; pp',
                '\tassert \\6 <= 40, "PP must be 40 or less"',
                'ENDM',
                '',
                'Moves:',
                '; Characteristics of each move.',
                '\ttable_width MOVE_LENGTH, Moves',
            ]
            for i, (name, effect, power, _type, accuracy, pp, *_) in enumerate(reader): #ws.iter_rows(min_row=1+int(not ARGS.no_header), values_only=True):
                if i == 0 and not ARGS.no_header: continue
                if any([not field.isnumeric() for field in [power, accuracy, pp]]): raise ValueError('Power, Accuracy, and PP must be numeric.')
                name, effect, _type = [field.upper().strip() for field in [name, effect, _type]]
                _type = 'PSYCHIC_TYPE' if _type == 'PSYCHIC' else _type
                power, accuracy, pp = [lpad(field, 3) for field in [power, accuracy, pp]]
                name, effect, power, _type, accuracy = [field+',' for field in [name, effect, power, _type, accuracy]]
                lines.append(f'\tmove {rpad(name, 13)} {rpad(effect, 27)} {rpad(power, 4)} {rpad(_type, 13)} {rpad(accuracy, 4)}{pp}')
            lines.append('\tassert_table_length NUM_ATTACKS')
            lines.append('\n; autogenerated by moves.py')
            outfile.writelines([line+'\n' for line in lines])

if __name__ == '__main__':
    error = None
    if not ARGS.infile: error = 'No input file specified. Please specify using -i.'
    if not ARGS.infile.suffix in ['.asm', '.csv']: error = 'Input must be .asm or .csv file.'
    if not ARGS.infile.exists(): error = 'Input file does not exist.'
    if ARGS.outdir.suffix: error = 'Output must be a directory, not a file.'
    try: ARGS.outdir.mkdir(parents=True, exist_ok=True)
    except Exception as e: error = 'Error while creating output dir: ' + e
    if error:    
        print(f'moves.py: {error} (Use -h to see options)')
        exit()
    outfile = ARGS.outdir.joinpath(ARGS.infile.stem).with_suffix({'.asm':'.csv','.csv':'.asm'}[ARGS.infile.suffix])
    print(f'Converting {ARGS.infile} to {outfile}...', end='\r')
    {'.asm': asm_to_csv, '.csv': csv_to_asm }[ARGS.infile.suffix](outfile)
    print(f'Converting {ARGS.infile} to {outfile}...Done.')
