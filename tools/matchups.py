#!/usr/bin/env python3

# Converts type_matchups.asm between assembly and csv for easier type chart changes.

import csv
from pathlib import Path
from argparse import ArgumentParser

parser = ArgumentParser()
parser.description = 'Converts moves.asm between assembly and excel for easier type chart changes. Assumes types are in the following order:\
                      Normal, Fire, Water, Electric, Grass, Ice, Fighting, Poison, Ground, Flying, Psychic, Bug, Rock, Ghost, Dragon'
parser.add_argument('-i', '--infile', type=Path, help='Path of the .asm or .csv file to parse. Filetype determines parse action.')
parser.add_argument('-o', '--outdir', type=Path, help='Directory to save the parsed file in. Defaults to current directory.', default='.')
parser.add_argument('-s', '--sheet', type=str, help='Name of the worksheet to parse, if not the first one. Ignored if input is an .asm file.')
ARGS, _ = parser.parse_known_args()

types = ['NORMAL', 'FIRE', 'WATER', 'ELECTRIC', 'GRASS', 'ICE', 'FIGHTING', 'POISON', 'GROUND', 'FLYING', 'PSYCHIC', 'BUG', 'ROCK', 'GHOST', 'DRAGON']
matchups = { _type: dict.fromkeys(types) for _type in types } # { Attacker : { Defender : Multiplier } }

def asm_to_csv(outfile:Path) -> None:
    # converts and exports the type matchups from an assembly to a type chart .csv
    effects = { 'NO_EFFECT' : 0, 'NOT_VERY_EFFECTIVE' : 0.5, 'SUPER_EFFECTIVE' : 2 }
    with ARGS.infile.open() as infile:
        for line in infile.readlines():
            data = line.split(';')[0].split('\tdb')
            if len(data) <= 1 or '-1' in data[-1]: continue
            attacker, defender, effectiveness = [field.strip() for field in data[-1].split(',')]
            attacker = 'PSYCHIC' if attacker == 'PSYCHIC_TYPE' else attacker # the move, the type, or the trainer class?
            defender = 'PSYCHIC' if defender == 'PSYCHIC_TYPE' else defender
            matchups[attacker][defender] = effects[effectiveness]
    with open(outfile, 'w', newline='') as outfile:
        writer = csv.writer(outfile, delimiter=',')
        writer.writerow(['', *types])
        for attacker in matchups:
            writer.writerow([attacker, *matchups[attacker].values()])

def rpad(string:str, target:int):
    # right pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return string + ' '*amount if amount > 0 else string

def lpad(string:str, target:int):
    # left pads `string` with whitespace if it is shorter than `target`.
    amount = target - len(string)
    return ' '*amount + string if amount > 0 else string

def csv_to_asm(outfile:Path):
    # converts the matchups from a type chart csv into a "valid" copy of type_matchups.asm.
    # NOTE: "valid" assumes that all fields are written exactly as they appear in the code;
    #        only making strings uppercase and converting 'Psychic' to 'PSYCHIC_TYPE' are automated
    effects = { '0': 'NO_EFFECT', '0.5': 'NOT_VERY_EFFECTIVE', '2': 'SUPER_EFFECTIVE' }
    with ARGS.infile.open() as infile:
        with open(outfile, 'w') as outfile:
            reader = csv.reader(infile, delimiter=',')
            lines = [
                'TypeEffects:',
	            '\t;  attacker,     defender,     *=',
            ]
            for i, [attacker, *defenders] in enumerate(reader):
                if i == 0: continue
                attacker = attacker.upper()
                attacker = ('PSYCHIC_TYPE' if attacker == 'PSYCHIC' else attacker)+','
                for d, effectiveness in enumerate(defenders):
                    if not effectiveness: continue
                    defender = types[d]
                    defender = ('PSYCHIC_TYPE' if defender == 'PSYCHIC' else defender)+','
                    lines.append(f'\tdb {rpad(attacker, 13)} {rpad(defender, 13)} {effects[effectiveness]}')
            lines.append('\tdb -1 ; end')
            lines.append('\n; autogenerated by type_matchups.py')
            outfile.writelines([line+'\n' for line in lines])

if __name__ == '__main__':
    error = None
    if not ARGS.infile: error = 'No input file specified. Please specify using -i.'
    if not ARGS.infile.suffix in ['.asm', '.csv']: error = 'Input must be .asm or .csv file.'
    if not ARGS.infile.exists(): error = 'Input file does not exist.'
    if ARGS.outdir.suffix: error = 'Output must be a directory, not a file.'
    try: ARGS.outdir.mkdir(parents=True, exist_ok=True)
    except Exception as e: error = 'Error while creating output dir: ' + e
    if error:    
        print(f'type_matchups.py: {error} (Use -h to see options)')
        exit()
    outfile = ARGS.outdir.joinpath(ARGS.infile.stem).with_suffix({'.asm':'.csv','.csv':'.asm'}[ARGS.infile.suffix])
    print(f'Converting {ARGS.infile} to {outfile}...', end='\r')
    {'.asm': asm_to_csv, '.csv': csv_to_asm }[ARGS.infile.suffix](outfile)
    print(f'Converting {ARGS.infile} to {outfile}...Done.')